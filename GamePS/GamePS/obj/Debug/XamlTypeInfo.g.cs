//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace GamePS
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace GamePS.GamePS_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_PhysicsSprite() { return new global::Spritehand.FarseerHelper.PhysicsSprite(); }

        private object Activate_1_PhysicsCanvas() { return new global::Spritehand.FarseerHelper.PhysicsCanvas(); }

        private object Activate_5_Box() { return new global::GamePS.Box(); }

        private object Activate_7_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>(); }

        private object Activate_8_Gameplay() { return new global::GamePS.Gameplay(); }

        private object Activate_9_MainPage() { return new global::GamePS.MainPage(); }

        private object Activate_10_Menu() { return new global::GamePS.Menu(); }

        private object Activate_11_Obstacle() { return new global::GamePS.Obstacle(); }

        private void MapAdd_7_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::Spritehand.FarseerHelper.PhysicsSprite)item;
            collection.Add(newKey, newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GamePS.GamePS_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Canvas":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Canvas));
                break;

            case "Windows.UI.Xaml.Controls.Panel":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Panel));
                break;

            case "String":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Double":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Boolean":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Object":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Int32":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Media.CompositeTransform":
                xamlType = new global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.CompositeTransform));
                break;

            case "Spritehand.FarseerHelper.PhysicsSprite":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Spritehand.FarseerHelper.PhysicsSprite), GetXamlTypeByName("Windows.UI.Xaml.Controls.Canvas"));
                userType.Activator = Activate_0_PhysicsSprite;
                userType.AddMemberName("ShapeType");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("RestitutionCoefficient");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GameCanvas");
                userType.AddMemberName("FrictionCoefficient");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CollisionEventDisable");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStatic");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AllowStaticObjectManipulation");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSensor");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("EffectiveDamage");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("UserData");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("OriginalName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsBodyEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MousePickEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("InternalName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("getWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("getHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Mass");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Position");
                userType.AddMemberName("Rotation");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsBullet");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("InitializePhysics");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("BodyObject");
                userType.AddMemberName("CollisionGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("CausesCollisions");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DebugMode");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AngularDamping");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("LinearDamping");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("UserControlParent");
                xamlType = userType;
                break;

            case "Spritehand.FarseerHelper.PhysicsCanvas":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Spritehand.FarseerHelper.PhysicsCanvas), GetXamlTypeByName("Windows.UI.Xaml.Controls.Canvas"));
                userType.Activator = Activate_1_PhysicsCanvas;
                userType.AddMemberName("MousePickEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Simulator");
                userType.AddMemberName("PhysicsObjects");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>),
                                                   "System.Collections.Generic.Dictionary<String, Spritehand.FarseerHelper.PhysicsSprite>");
                userType.AddMemberName("LastFPS");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("RelativeScale");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("AllowStaticObjectManipulation");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("TransformRoot");
                userType.AddMemberName("PauseSimulation");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AutoUpdate");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("TimeStep");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GravityHorizontal");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("GravityVertical");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("DebugMode");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Microsoft.Xna.Framework.Vector2":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.Xna.Framework.Vector2), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "FarseerPhysics.Dynamics.Body":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::FarseerPhysics.Dynamics.Body), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "GamePS.Box":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GamePS.Box), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_Box;
                xamlType = userType;
                break;

            case "FarseerPhysics.Dynamics.World":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::FarseerPhysics.Dynamics.World), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Collections.Generic.Dictionary<String, Spritehand.FarseerHelper.PhysicsSprite>":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>),
                                                   "System.Collections.Generic.Dictionary<String, Spritehand.FarseerHelper.PhysicsSprite>");
                userType.Activator = Activate_7_Dictionary;
                userType.DictionaryAdd = MapAdd_7_Dictionary;
                xamlType = userType;
                break;

            case "GamePS.Gameplay":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GamePS.Gameplay), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_Gameplay;
                xamlType = userType;
                break;

            case "GamePS.MainPage":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GamePS.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_MainPage;
                xamlType = userType;
                break;

            case "GamePS.Menu":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GamePS.Menu), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_Menu;
                xamlType = userType;
                break;

            case "GamePS.Obstacle":
                userType = new global::GamePS.GamePS_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GamePS.Obstacle), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_Obstacle;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_PhysicsSprite_ShapeType(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.ShapeType;
        }
        private void set_0_PhysicsSprite_ShapeType(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.ShapeType = (global::System.String)Value;
        }
        private object get_1_PhysicsSprite_RestitutionCoefficient(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.RestitutionCoefficient;
        }
        private void set_1_PhysicsSprite_RestitutionCoefficient(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.RestitutionCoefficient = (global::System.Double)Value;
        }
        private object get_2_PhysicsSprite_GameCanvas(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.GameCanvas;
        }
        private object get_3_PhysicsSprite_FrictionCoefficient(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.FrictionCoefficient;
        }
        private void set_3_PhysicsSprite_FrictionCoefficient(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.FrictionCoefficient = (global::System.Double)Value;
        }
        private object get_4_PhysicsSprite_CollisionEventDisable(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.CollisionEventDisable;
        }
        private void set_4_PhysicsSprite_CollisionEventDisable(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.CollisionEventDisable = (global::System.Boolean)Value;
        }
        private object get_5_PhysicsSprite_IsStatic(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.IsStatic;
        }
        private void set_5_PhysicsSprite_IsStatic(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.IsStatic = (global::System.Boolean)Value;
        }
        private object get_6_PhysicsSprite_AllowStaticObjectManipulation(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.AllowStaticObjectManipulation;
        }
        private void set_6_PhysicsSprite_AllowStaticObjectManipulation(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.AllowStaticObjectManipulation = (global::System.Boolean)Value;
        }
        private object get_7_PhysicsSprite_IsSensor(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.IsSensor;
        }
        private void set_7_PhysicsSprite_IsSensor(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.IsSensor = (global::System.Boolean)Value;
        }
        private object get_8_PhysicsSprite_EffectiveDamage(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.EffectiveDamage;
        }
        private void set_8_PhysicsSprite_EffectiveDamage(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.EffectiveDamage = (global::System.Double)Value;
        }
        private object get_9_PhysicsSprite_UserData(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.UserData;
        }
        private void set_9_PhysicsSprite_UserData(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.UserData = (global::System.Object)Value;
        }
        private object get_10_PhysicsSprite_OriginalName(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.OriginalName;
        }
        private void set_10_PhysicsSprite_OriginalName(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.OriginalName = (global::System.String)Value;
        }
        private object get_11_PhysicsSprite_IsEnabled(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.IsEnabled;
        }
        private void set_11_PhysicsSprite_IsEnabled(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_12_PhysicsSprite_IsBodyEnabled(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.IsBodyEnabled;
        }
        private void set_12_PhysicsSprite_IsBodyEnabled(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.IsBodyEnabled = (global::System.Boolean)Value;
        }
        private object get_13_PhysicsSprite_MousePickEnabled(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.MousePickEnabled;
        }
        private void set_13_PhysicsSprite_MousePickEnabled(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.MousePickEnabled = (global::System.Boolean)Value;
        }
        private object get_14_PhysicsSprite_InternalName(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.InternalName;
        }
        private void set_14_PhysicsSprite_InternalName(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.InternalName = (global::System.String)Value;
        }
        private object get_15_PhysicsSprite_getWidth(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.getWidth;
        }
        private void set_15_PhysicsSprite_getWidth(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.getWidth = (global::System.Double)Value;
        }
        private object get_16_PhysicsSprite_getHeight(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.getHeight;
        }
        private void set_16_PhysicsSprite_getHeight(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.getHeight = (global::System.Double)Value;
        }
        private object get_17_PhysicsSprite_Mass(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.Mass;
        }
        private void set_17_PhysicsSprite_Mass(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.Mass = (global::System.Double)Value;
        }
        private object get_18_PhysicsSprite_Position(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.Position;
        }
        private void set_18_PhysicsSprite_Position(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.Position = (global::Microsoft.Xna.Framework.Vector2)Value;
        }
        private object get_19_PhysicsSprite_Rotation(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.Rotation;
        }
        private void set_19_PhysicsSprite_Rotation(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_20_PhysicsSprite_IsBullet(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.IsBullet;
        }
        private void set_20_PhysicsSprite_IsBullet(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.IsBullet = (global::System.Boolean)Value;
        }
        private object get_21_PhysicsSprite_InitializePhysics(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.InitializePhysics;
        }
        private void set_21_PhysicsSprite_InitializePhysics(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.InitializePhysics = (global::System.Boolean)Value;
        }
        private object get_22_PhysicsSprite_BodyObject(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.BodyObject;
        }
        private void set_22_PhysicsSprite_BodyObject(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.BodyObject = (global::FarseerPhysics.Dynamics.Body)Value;
        }
        private object get_23_PhysicsSprite_CollisionGroup(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.CollisionGroup;
        }
        private void set_23_PhysicsSprite_CollisionGroup(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.CollisionGroup = (global::System.Int32)Value;
        }
        private object get_24_PhysicsSprite_CausesCollisions(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.CausesCollisions;
        }
        private void set_24_PhysicsSprite_CausesCollisions(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.CausesCollisions = (global::System.Boolean)Value;
        }
        private object get_25_PhysicsSprite_DebugMode(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.DebugMode;
        }
        private void set_25_PhysicsSprite_DebugMode(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.DebugMode = (global::System.Boolean)Value;
        }
        private object get_26_PhysicsSprite_AngularDamping(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.AngularDamping;
        }
        private void set_26_PhysicsSprite_AngularDamping(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.AngularDamping = (global::System.Double)Value;
        }
        private object get_27_PhysicsSprite_LinearDamping(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.LinearDamping;
        }
        private void set_27_PhysicsSprite_LinearDamping(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.LinearDamping = (global::System.Double)Value;
        }
        private object get_28_PhysicsSprite_UserControlParent(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            return that.UserControlParent;
        }
        private void set_28_PhysicsSprite_UserControlParent(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsSprite)instance;
            that.UserControlParent = (global::Windows.UI.Xaml.Controls.UserControl)Value;
        }
        private object get_29_PhysicsCanvas_MousePickEnabled(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.MousePickEnabled;
        }
        private void set_29_PhysicsCanvas_MousePickEnabled(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.MousePickEnabled = (global::System.Boolean)Value;
        }
        private object get_30_PhysicsCanvas_Simulator(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.Simulator;
        }
        private void set_30_PhysicsCanvas_Simulator(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.Simulator = (global::FarseerPhysics.Dynamics.World)Value;
        }
        private object get_31_PhysicsCanvas_PhysicsObjects(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.PhysicsObjects;
        }
        private void set_31_PhysicsCanvas_PhysicsObjects(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.PhysicsObjects = (global::System.Collections.Generic.Dictionary<global::System.String, global::Spritehand.FarseerHelper.PhysicsSprite>)Value;
        }
        private object get_32_PhysicsCanvas_LastFPS(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.LastFPS;
        }
        private void set_32_PhysicsCanvas_LastFPS(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.LastFPS = (global::System.Int32)Value;
        }
        private object get_33_PhysicsCanvas_RelativeScale(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.RelativeScale;
        }
        private void set_33_PhysicsCanvas_RelativeScale(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.RelativeScale = (global::System.Double)Value;
        }
        private object get_34_PhysicsCanvas_AllowStaticObjectManipulation(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.AllowStaticObjectManipulation;
        }
        private void set_34_PhysicsCanvas_AllowStaticObjectManipulation(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.AllowStaticObjectManipulation = (global::System.Boolean)Value;
        }
        private object get_35_PhysicsCanvas_TransformRoot(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.TransformRoot;
        }
        private void set_35_PhysicsCanvas_TransformRoot(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.TransformRoot = (global::Windows.UI.Xaml.Media.CompositeTransform)Value;
        }
        private object get_36_PhysicsCanvas_PauseSimulation(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.PauseSimulation;
        }
        private void set_36_PhysicsCanvas_PauseSimulation(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.PauseSimulation = (global::System.Boolean)Value;
        }
        private object get_37_PhysicsCanvas_AutoUpdate(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.AutoUpdate;
        }
        private void set_37_PhysicsCanvas_AutoUpdate(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.AutoUpdate = (global::System.Boolean)Value;
        }
        private object get_38_PhysicsCanvas_TimeStep(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.TimeStep;
        }
        private void set_38_PhysicsCanvas_TimeStep(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.TimeStep = (global::System.Double)Value;
        }
        private object get_39_PhysicsCanvas_GravityHorizontal(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.GravityHorizontal;
        }
        private void set_39_PhysicsCanvas_GravityHorizontal(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.GravityHorizontal = (global::System.Int32)Value;
        }
        private object get_40_PhysicsCanvas_GravityVertical(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.GravityVertical;
        }
        private void set_40_PhysicsCanvas_GravityVertical(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.GravityVertical = (global::System.Int32)Value;
        }
        private object get_41_PhysicsCanvas_DebugMode(object instance)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            return that.DebugMode;
        }
        private void set_41_PhysicsCanvas_DebugMode(object instance, object Value)
        {
            var that = (global::Spritehand.FarseerHelper.PhysicsCanvas)instance;
            that.DebugMode = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GamePS.GamePS_XamlTypeInfo.XamlMember xamlMember = null;
            global::GamePS.GamePS_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Spritehand.FarseerHelper.PhysicsSprite.ShapeType":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "ShapeType", "String");
                xamlMember.Getter = get_0_PhysicsSprite_ShapeType;
                xamlMember.Setter = set_0_PhysicsSprite_ShapeType;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.RestitutionCoefficient":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "RestitutionCoefficient", "Double");
                xamlMember.Getter = get_1_PhysicsSprite_RestitutionCoefficient;
                xamlMember.Setter = set_1_PhysicsSprite_RestitutionCoefficient;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.GameCanvas":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "GameCanvas", "Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember.Getter = get_2_PhysicsSprite_GameCanvas;
                xamlMember.SetIsReadOnly();
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.FrictionCoefficient":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "FrictionCoefficient", "Double");
                xamlMember.Getter = get_3_PhysicsSprite_FrictionCoefficient;
                xamlMember.Setter = set_3_PhysicsSprite_FrictionCoefficient;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.CollisionEventDisable":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "CollisionEventDisable", "Boolean");
                xamlMember.Getter = get_4_PhysicsSprite_CollisionEventDisable;
                xamlMember.Setter = set_4_PhysicsSprite_CollisionEventDisable;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.IsStatic":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "IsStatic", "Boolean");
                xamlMember.Getter = get_5_PhysicsSprite_IsStatic;
                xamlMember.Setter = set_5_PhysicsSprite_IsStatic;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.AllowStaticObjectManipulation":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "AllowStaticObjectManipulation", "Boolean");
                xamlMember.Getter = get_6_PhysicsSprite_AllowStaticObjectManipulation;
                xamlMember.Setter = set_6_PhysicsSprite_AllowStaticObjectManipulation;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.IsSensor":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "IsSensor", "Boolean");
                xamlMember.Getter = get_7_PhysicsSprite_IsSensor;
                xamlMember.Setter = set_7_PhysicsSprite_IsSensor;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.EffectiveDamage":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "EffectiveDamage", "Double");
                xamlMember.Getter = get_8_PhysicsSprite_EffectiveDamage;
                xamlMember.Setter = set_8_PhysicsSprite_EffectiveDamage;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.UserData":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "UserData", "Object");
                xamlMember.Getter = get_9_PhysicsSprite_UserData;
                xamlMember.Setter = set_9_PhysicsSprite_UserData;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.OriginalName":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "OriginalName", "String");
                xamlMember.Getter = get_10_PhysicsSprite_OriginalName;
                xamlMember.Setter = set_10_PhysicsSprite_OriginalName;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.IsEnabled":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.Getter = get_11_PhysicsSprite_IsEnabled;
                xamlMember.Setter = set_11_PhysicsSprite_IsEnabled;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.IsBodyEnabled":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "IsBodyEnabled", "Boolean");
                xamlMember.Getter = get_12_PhysicsSprite_IsBodyEnabled;
                xamlMember.Setter = set_12_PhysicsSprite_IsBodyEnabled;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.MousePickEnabled":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "MousePickEnabled", "Boolean");
                xamlMember.Getter = get_13_PhysicsSprite_MousePickEnabled;
                xamlMember.Setter = set_13_PhysicsSprite_MousePickEnabled;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.InternalName":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "InternalName", "String");
                xamlMember.Getter = get_14_PhysicsSprite_InternalName;
                xamlMember.Setter = set_14_PhysicsSprite_InternalName;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.getWidth":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "getWidth", "Double");
                xamlMember.Getter = get_15_PhysicsSprite_getWidth;
                xamlMember.Setter = set_15_PhysicsSprite_getWidth;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.getHeight":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "getHeight", "Double");
                xamlMember.Getter = get_16_PhysicsSprite_getHeight;
                xamlMember.Setter = set_16_PhysicsSprite_getHeight;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.Mass":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "Mass", "Double");
                xamlMember.Getter = get_17_PhysicsSprite_Mass;
                xamlMember.Setter = set_17_PhysicsSprite_Mass;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.Position":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "Position", "Microsoft.Xna.Framework.Vector2");
                xamlMember.Getter = get_18_PhysicsSprite_Position;
                xamlMember.Setter = set_18_PhysicsSprite_Position;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.Rotation":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.Getter = get_19_PhysicsSprite_Rotation;
                xamlMember.Setter = set_19_PhysicsSprite_Rotation;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.IsBullet":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "IsBullet", "Boolean");
                xamlMember.Getter = get_20_PhysicsSprite_IsBullet;
                xamlMember.Setter = set_20_PhysicsSprite_IsBullet;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.InitializePhysics":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "InitializePhysics", "Boolean");
                xamlMember.Getter = get_21_PhysicsSprite_InitializePhysics;
                xamlMember.Setter = set_21_PhysicsSprite_InitializePhysics;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.BodyObject":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "BodyObject", "FarseerPhysics.Dynamics.Body");
                xamlMember.Getter = get_22_PhysicsSprite_BodyObject;
                xamlMember.Setter = set_22_PhysicsSprite_BodyObject;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.CollisionGroup":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "CollisionGroup", "Int32");
                xamlMember.Getter = get_23_PhysicsSprite_CollisionGroup;
                xamlMember.Setter = set_23_PhysicsSprite_CollisionGroup;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.CausesCollisions":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "CausesCollisions", "Boolean");
                xamlMember.Getter = get_24_PhysicsSprite_CausesCollisions;
                xamlMember.Setter = set_24_PhysicsSprite_CausesCollisions;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.DebugMode":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "DebugMode", "Boolean");
                xamlMember.Getter = get_25_PhysicsSprite_DebugMode;
                xamlMember.Setter = set_25_PhysicsSprite_DebugMode;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.AngularDamping":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "AngularDamping", "Double");
                xamlMember.Getter = get_26_PhysicsSprite_AngularDamping;
                xamlMember.Setter = set_26_PhysicsSprite_AngularDamping;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.LinearDamping":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "LinearDamping", "Double");
                xamlMember.Getter = get_27_PhysicsSprite_LinearDamping;
                xamlMember.Setter = set_27_PhysicsSprite_LinearDamping;
                break;
            case "Spritehand.FarseerHelper.PhysicsSprite.UserControlParent":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsSprite");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "UserControlParent", "Windows.UI.Xaml.Controls.UserControl");
                xamlMember.Getter = get_28_PhysicsSprite_UserControlParent;
                xamlMember.Setter = set_28_PhysicsSprite_UserControlParent;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.MousePickEnabled":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "MousePickEnabled", "Boolean");
                xamlMember.Getter = get_29_PhysicsCanvas_MousePickEnabled;
                xamlMember.Setter = set_29_PhysicsCanvas_MousePickEnabled;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.Simulator":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "Simulator", "FarseerPhysics.Dynamics.World");
                xamlMember.Getter = get_30_PhysicsCanvas_Simulator;
                xamlMember.Setter = set_30_PhysicsCanvas_Simulator;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.PhysicsObjects":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "PhysicsObjects", "System.Collections.Generic.Dictionary<String, Spritehand.FarseerHelper.PhysicsSprite>");
                xamlMember.Getter = get_31_PhysicsCanvas_PhysicsObjects;
                xamlMember.Setter = set_31_PhysicsCanvas_PhysicsObjects;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.LastFPS":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "LastFPS", "Int32");
                xamlMember.Getter = get_32_PhysicsCanvas_LastFPS;
                xamlMember.Setter = set_32_PhysicsCanvas_LastFPS;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.RelativeScale":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "RelativeScale", "Double");
                xamlMember.Getter = get_33_PhysicsCanvas_RelativeScale;
                xamlMember.Setter = set_33_PhysicsCanvas_RelativeScale;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.AllowStaticObjectManipulation":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "AllowStaticObjectManipulation", "Boolean");
                xamlMember.Getter = get_34_PhysicsCanvas_AllowStaticObjectManipulation;
                xamlMember.Setter = set_34_PhysicsCanvas_AllowStaticObjectManipulation;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.TransformRoot":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "TransformRoot", "Windows.UI.Xaml.Media.CompositeTransform");
                xamlMember.Getter = get_35_PhysicsCanvas_TransformRoot;
                xamlMember.Setter = set_35_PhysicsCanvas_TransformRoot;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.PauseSimulation":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "PauseSimulation", "Boolean");
                xamlMember.Getter = get_36_PhysicsCanvas_PauseSimulation;
                xamlMember.Setter = set_36_PhysicsCanvas_PauseSimulation;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.AutoUpdate":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "AutoUpdate", "Boolean");
                xamlMember.Getter = get_37_PhysicsCanvas_AutoUpdate;
                xamlMember.Setter = set_37_PhysicsCanvas_AutoUpdate;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.TimeStep":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "TimeStep", "Double");
                xamlMember.Getter = get_38_PhysicsCanvas_TimeStep;
                xamlMember.Setter = set_38_PhysicsCanvas_TimeStep;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.GravityHorizontal":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "GravityHorizontal", "Int32");
                xamlMember.Getter = get_39_PhysicsCanvas_GravityHorizontal;
                xamlMember.Setter = set_39_PhysicsCanvas_GravityHorizontal;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.GravityVertical":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "GravityVertical", "Int32");
                xamlMember.Getter = get_40_PhysicsCanvas_GravityVertical;
                xamlMember.Setter = set_40_PhysicsCanvas_GravityVertical;
                break;
            case "Spritehand.FarseerHelper.PhysicsCanvas.DebugMode":
                userType = (global::GamePS.GamePS_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Spritehand.FarseerHelper.PhysicsCanvas");
                xamlMember = new global::GamePS.GamePS_XamlTypeInfo.XamlMember(this, "DebugMode", "Boolean");
                xamlMember.Getter = get_41_PhysicsCanvas_DebugMode;
                xamlMember.Setter = set_41_PhysicsCanvas_DebugMode;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GamePS.GamePS_XamlTypeInfo.XamlSystemBaseType
    {
        global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GamePS.GamePS_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


